#!/bin/sh
#
# Copyright (c) 2021, The NomadBSD Project
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
# This script batch builds the image for amd64, mac, and i386.
#

. ./common

sha256_chksum()
{
	echo "Calculating sha256 checksum for $1 ..."
	sha256 "$1" > "$1".sha256
}

lzma_compress()
{
	echo "Compressing $1 ..."
	lzma -k -9 "$1"
}

post_process()
{
	sha256_chksum "$1"
	lzma_compress "$1"
	sha256_chksum "$1".lzma
}

clean()
{
	echo "Cleaning ..."
	./build clean
}

clean

# Order of arch is important. After building the amd64 image we can
# use most of it for the mac image.
for arch in amd64 mac i386; do
	ARCH=${arch}
	image=$(imagename)
	echo "Building ${image} ..."
	if [ ${arch} = "mac" ]; then
		# There is no need to rebuild everything for the mac image
		if ! (./build -a ${arch} initbase && ./build -a ${arch} setupgui && \
		 ./build -a ${arch} installgui && ./build -a ${arch} image); then
			echo "Building of ${image} failed." >&2
			exit 1
		fi
		pkg -c "${SYSDIR}" info > "${image%img}manifest"
		clean
	elif ! ./build -a ${arch} all; then
		echo "Building of ${image} failed." >&2
		exit 1
	else
		pkg -c "${SYSDIR}" info > "${image%img}manifest"
	fi
	post_process "${image}"
done

